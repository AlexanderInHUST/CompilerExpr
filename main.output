Terminals unused in grammar

   _INTEGER_VALUE
   _VARIABLE_NAME
   _FLOAT_VALUE
   _CHAR_VALUE
   _INT_DECLARATION
   _FLOAT_RECLARATION
   _CHAR_DECLARATION
   _IF_CONDITION
   _WHILE_CONDITION
   _ASSIGN_UNARY_OP
   _MINUS_OP
   _DIVIDE_OP
   _MODULE_OP
   _PLUS_ASSIGN_OP
   _MINUS_ASSIGN_OP
   _MULTI_ASSIGN_OP
   _DIVIDE_ASSIGN_OP
   _MODULE_ASSIGN_OP
   _SELF_PLUS_UNARY_OP
   _SELF_MINUS_UNARY_OP
   _LARGER_OP
   _LESS_OP
   _LARGER_EQUAL_OP
   _LESS_EQUAL_OP
   _NOT_EQUAL_OP
   _EQUAL_OP
   _LEFT_BRACKET
   _RIGHT_BRACKET
   _LEFT_BRACE
   _RIGHT_BRACE
   _END_DIVIDED_CHAR
   _COMMA_DIVIDED_CHAR
   _COMMENT_LEFT
   _COMMENT_RIGHT
   _LEFT_SELF_PLUS_UNARY_OP
   _LEFT_SELF_MINUS_UNARY_OP
   _RIGHT_SELF_PLUS_UNARY_OP
   _RIGHT_SELF_MINUS_UNARY_OP
   _UMINUS_OP


State 1 conflicts: 4 shift/reduce
State 7 conflicts: 3 shift/reduce


Grammar

    0 $accept: code $end

    1 code: %empty
    2     | code line

    3 line: %empty
    4     | exp line
    5     | '\n'

    6 exp: _PLUS_OP
    7    | _MULTIPLE_OP


Terminals, with rules where they appear

$end (0) 0
'\n' (10) 5
error (256)
_INTEGER_VALUE (258)
_VARIABLE_NAME (259)
_FLOAT_VALUE (260)
_CHAR_VALUE (261)
_INT_DECLARATION (262)
_FLOAT_RECLARATION (263)
_CHAR_DECLARATION (264)
_IF_CONDITION (265)
_WHILE_CONDITION (266)
_ASSIGN_UNARY_OP (267)
_PLUS_OP (268) 6
_MINUS_OP (269)
_MULTIPLE_OP (270) 7
_DIVIDE_OP (271)
_MODULE_OP (272)
_PLUS_ASSIGN_OP (273)
_MINUS_ASSIGN_OP (274)
_MULTI_ASSIGN_OP (275)
_DIVIDE_ASSIGN_OP (276)
_MODULE_ASSIGN_OP (277)
_SELF_PLUS_UNARY_OP (278)
_SELF_MINUS_UNARY_OP (279)
_LARGER_OP (280)
_LESS_OP (281)
_LARGER_EQUAL_OP (282)
_LESS_EQUAL_OP (283)
_NOT_EQUAL_OP (284)
_EQUAL_OP (285)
_LEFT_BRACKET (286)
_RIGHT_BRACKET (287)
_LEFT_BRACE (288)
_RIGHT_BRACE (289)
_END_DIVIDED_CHAR (290)
_COMMA_DIVIDED_CHAR (291)
_COMMENT_LEFT (292)
_COMMENT_RIGHT (293)
_LEFT_SELF_PLUS_UNARY_OP (294)
_LEFT_SELF_MINUS_UNARY_OP (295)
_RIGHT_SELF_PLUS_UNARY_OP (296)
_RIGHT_SELF_MINUS_UNARY_OP (297)
_UMINUS_OP (298)


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
code (46)
    on left: 1 2, on right: 0 2
line (47)
    on left: 3 4 5, on right: 2 4
exp (48)
    on left: 6 7, on right: 4


State 0

    0 $accept: . code $end

    $default  reduce using rule 1 (code)

    code  go to state 1


State 1

    0 $accept: code . $end
    2 code: code . line

    $end          shift, and go to state 2
    _PLUS_OP      shift, and go to state 3
    _MULTIPLE_OP  shift, and go to state 4
    '\n'          shift, and go to state 5

    $end          [reduce using rule 3 (line)]
    _PLUS_OP      [reduce using rule 3 (line)]
    _MULTIPLE_OP  [reduce using rule 3 (line)]
    '\n'          [reduce using rule 3 (line)]

    line  go to state 6
    exp   go to state 7


State 2

    0 $accept: code $end .

    $default  accept


State 3

    6 exp: _PLUS_OP .

    $default  reduce using rule 6 (exp)


State 4

    7 exp: _MULTIPLE_OP .

    $default  reduce using rule 7 (exp)


State 5

    5 line: '\n' .

    $default  reduce using rule 5 (line)


State 6

    2 code: code line .

    $default  reduce using rule 2 (code)


State 7

    4 line: exp . line

    _PLUS_OP      shift, and go to state 3
    _MULTIPLE_OP  shift, and go to state 4
    '\n'          shift, and go to state 5

    _PLUS_OP      [reduce using rule 3 (line)]
    _MULTIPLE_OP  [reduce using rule 3 (line)]
    '\n'          [reduce using rule 3 (line)]
    $default      reduce using rule 3 (line)

    line  go to state 8
    exp   go to state 7


State 8

    4 line: exp line .

    $default  reduce using rule 4 (line)
