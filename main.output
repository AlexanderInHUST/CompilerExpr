Terminals unused in grammar

   _NOT_OP
   _SELF_MINUS_UNARY_OP
   _COMMENT_LEFT
   _COMMENT_RIGHT
   _UMINUS_OP


Grammar

    0 $accept: code $end

    1 code: %empty
    2     | code block
    3     | code if_conditions
    4     | code while_conditions

    5 if_conditions: _IF_CONDITION _LEFT_BRACKET exp _RIGHT_BRACKET block
    6              | _IF_CONDITION _LEFT_BRACKET exp _RIGHT_BRACKET block _ELSE_CONDITION block
    7              | _IF_CONDITION _LEFT_BRACKET exp _RIGHT_BRACKET block _ELSE_CONDITION if_conditions

    8 while_conditions: _WHILE_CONDITION _LEFT_BRACKET exp _RIGHT_BRACKET block

    9 block: sentence _END_DIVIDED_CHAR
   10      | _LEFT_BRACE code _RIGHT_BRACE
   11      | _EOF

   12 sentence: declaration_series var_declaration
   13         | _VARIABLE_NAME assign_series exp

   14 exp: _VARIABLE_NAME
   15    | _INTEGER_VALUE
   16    | _FLOAT_VALUE
   17    | _CHAR_VALUE
   18    | _VARIABLE_NAME _SELF_PLUS_UNARY_OP
   19    | _VARIABLE_NAME _RIGHT_SELF_MINUS_UNARY_OP
   20    | _LEFT_SELF_PLUS_UNARY_OP _VARIABLE_NAME
   21    | _LEFT_SELF_MINUS_UNARY_OP _VARIABLE_NAME
   22    | exp _PLUS_OP exp
   23    | exp _MINUS_OP exp
   24    | exp _MULTIPLE_OP exp
   25    | exp _DIVIDE_OP exp
   26    | exp _MODULE_OP exp
   27    | exp _LARGER_OP exp
   28    | exp _LESS_OP exp
   29    | exp _LARGER_EQUAL_OP exp
   30    | exp _LESS_EQUAL_OP exp
   31    | exp _EQUAL_OP exp
   32    | exp _NOT_EQUAL_OP exp
   33    | exp _OR_OP exp
   34    | exp _AND_OP exp
   35    | _LEFT_BRACKET exp _COMMA_DIVIDED_CHAR exp _RIGHT_BRACKET
   36    | _LEFT_BRACKET exp _RIGHT_BRACKET

   37 assign_series: _ASSIGN_UNARY_OP
   38              | _PLUS_ASSIGN_OP
   39              | _MINUS_ASSIGN_OP
   40              | _MULTI_ASSIGN_OP
   41              | _DIVIDE_ASSIGN_OP
   42              | _MODULE_ASSIGN_OP

   43 declaration_series: _INT_DECLARATION
   44                   | _CHAR_DECLARATION
   45                   | _FLOAT_RECLARATION

   46 var_declaration: _VARIABLE_NAME assign_series exp
   47                | var_declaration _COMMA_DIVIDED_CHAR var_declaration


Terminals, with rules where they appear

$end (0) 0
error (256)
_VARIABLE_NAME (258) 13 14 18 19 20 21 46
_INTEGER_VALUE (259) 15
_FLOAT_VALUE (260) 16
_CHAR_VALUE (261) 17
_INT_DECLARATION (262) 43
_FLOAT_RECLARATION (263) 45
_CHAR_DECLARATION (264) 44
_IF_CONDITION (265) 5 6 7
_WHILE_CONDITION (266) 8
_ELSE_CONDITION (267) 6 7
_ASSIGN_UNARY_OP (268) 37
_PLUS_OP (269) 22
_MINUS_OP (270) 23
_MULTIPLE_OP (271) 24
_DIVIDE_OP (272) 25
_MODULE_OP (273) 26
_OR_OP (274) 33
_AND_OP (275) 34
_NOT_OP (276)
_PLUS_ASSIGN_OP (277) 38
_MINUS_ASSIGN_OP (278) 39
_MULTI_ASSIGN_OP (279) 40
_DIVIDE_ASSIGN_OP (280) 41
_MODULE_ASSIGN_OP (281) 42
_SELF_PLUS_UNARY_OP (282) 18
_SELF_MINUS_UNARY_OP (283)
_LARGER_OP (284) 27
_LESS_OP (285) 28
_LARGER_EQUAL_OP (286) 29
_LESS_EQUAL_OP (287) 30
_NOT_EQUAL_OP (288) 32
_EQUAL_OP (289) 31
_LEFT_BRACKET (290) 5 6 7 8 35 36
_RIGHT_BRACKET (291) 5 6 7 8 35 36
_LEFT_BRACE (292) 10
_RIGHT_BRACE (293) 10
_END_DIVIDED_CHAR (294) 9
_COMMA_DIVIDED_CHAR (295) 35 47
_COMMENT_LEFT (296)
_COMMENT_RIGHT (297)
_EOF (298) 11
_LEFT_SELF_PLUS_UNARY_OP (299) 20
_LEFT_SELF_MINUS_UNARY_OP (300) 21
_RIGHT_SELF_PLUS_UNARY_OP (301)
_RIGHT_SELF_MINUS_UNARY_OP (302) 19
_UMINUS_OP (303)


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
code (50)
    on left: 1 2 3 4, on right: 0 2 3 4 10
if_conditions (51)
    on left: 5 6 7, on right: 3 7
while_conditions (52)
    on left: 8, on right: 4
block (53)
    on left: 9 10 11, on right: 2 5 6 7 8
sentence (54)
    on left: 12 13, on right: 9
exp (55)
    on left: 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
    32 33 34 35 36, on right: 5 6 7 8 13 22 23 24 25 26 27 28 29 30
    31 32 33 34 35 36 46
assign_series (56)
    on left: 37 38 39 40 41 42, on right: 13 46
declaration_series (57)
    on left: 43 44 45, on right: 12
var_declaration (58)
    on left: 46 47, on right: 12 47


State 0

    0 $accept: . code $end

    $default  reduce using rule 1 (code)

    code  go to state 1


State 1

    0 $accept: code . $end
    2 code: code . block
    3     | code . if_conditions
    4     | code . while_conditions

    $end                shift, and go to state 2
    _VARIABLE_NAME      shift, and go to state 3
    _INT_DECLARATION    shift, and go to state 4
    _FLOAT_RECLARATION  shift, and go to state 5
    _CHAR_DECLARATION   shift, and go to state 6
    _IF_CONDITION       shift, and go to state 7
    _WHILE_CONDITION    shift, and go to state 8
    _LEFT_BRACE         shift, and go to state 9
    _EOF                shift, and go to state 10

    if_conditions       go to state 11
    while_conditions    go to state 12
    block               go to state 13
    sentence            go to state 14
    declaration_series  go to state 15


State 2

    0 $accept: code $end .

    $default  accept


State 3

   13 sentence: _VARIABLE_NAME . assign_series exp

    _ASSIGN_UNARY_OP   shift, and go to state 16
    _PLUS_ASSIGN_OP    shift, and go to state 17
    _MINUS_ASSIGN_OP   shift, and go to state 18
    _MULTI_ASSIGN_OP   shift, and go to state 19
    _DIVIDE_ASSIGN_OP  shift, and go to state 20
    _MODULE_ASSIGN_OP  shift, and go to state 21

    assign_series  go to state 22


State 4

   43 declaration_series: _INT_DECLARATION .

    $default  reduce using rule 43 (declaration_series)


State 5

   45 declaration_series: _FLOAT_RECLARATION .

    $default  reduce using rule 45 (declaration_series)


State 6

   44 declaration_series: _CHAR_DECLARATION .

    $default  reduce using rule 44 (declaration_series)


State 7

    5 if_conditions: _IF_CONDITION . _LEFT_BRACKET exp _RIGHT_BRACKET block
    6              | _IF_CONDITION . _LEFT_BRACKET exp _RIGHT_BRACKET block _ELSE_CONDITION block
    7              | _IF_CONDITION . _LEFT_BRACKET exp _RIGHT_BRACKET block _ELSE_CONDITION if_conditions

    _LEFT_BRACKET  shift, and go to state 23


State 8

    8 while_conditions: _WHILE_CONDITION . _LEFT_BRACKET exp _RIGHT_BRACKET block

    _LEFT_BRACKET  shift, and go to state 24


State 9

   10 block: _LEFT_BRACE . code _RIGHT_BRACE

    $default  reduce using rule 1 (code)

    code  go to state 25


State 10

   11 block: _EOF .

    $default  reduce using rule 11 (block)


State 11

    3 code: code if_conditions .

    $default  reduce using rule 3 (code)


State 12

    4 code: code while_conditions .

    $default  reduce using rule 4 (code)


State 13

    2 code: code block .

    $default  reduce using rule 2 (code)


State 14

    9 block: sentence . _END_DIVIDED_CHAR

    _END_DIVIDED_CHAR  shift, and go to state 26


State 15

   12 sentence: declaration_series . var_declaration

    _VARIABLE_NAME  shift, and go to state 27

    var_declaration  go to state 28


State 16

   37 assign_series: _ASSIGN_UNARY_OP .

    $default  reduce using rule 37 (assign_series)


State 17

   38 assign_series: _PLUS_ASSIGN_OP .

    $default  reduce using rule 38 (assign_series)


State 18

   39 assign_series: _MINUS_ASSIGN_OP .

    $default  reduce using rule 39 (assign_series)


State 19

   40 assign_series: _MULTI_ASSIGN_OP .

    $default  reduce using rule 40 (assign_series)


State 20

   41 assign_series: _DIVIDE_ASSIGN_OP .

    $default  reduce using rule 41 (assign_series)


State 21

   42 assign_series: _MODULE_ASSIGN_OP .

    $default  reduce using rule 42 (assign_series)


State 22

   13 sentence: _VARIABLE_NAME assign_series . exp

    _VARIABLE_NAME             shift, and go to state 29
    _INTEGER_VALUE             shift, and go to state 30
    _FLOAT_VALUE               shift, and go to state 31
    _CHAR_VALUE                shift, and go to state 32
    _LEFT_BRACKET              shift, and go to state 33
    _LEFT_SELF_PLUS_UNARY_OP   shift, and go to state 34
    _LEFT_SELF_MINUS_UNARY_OP  shift, and go to state 35

    exp  go to state 36


State 23

    5 if_conditions: _IF_CONDITION _LEFT_BRACKET . exp _RIGHT_BRACKET block
    6              | _IF_CONDITION _LEFT_BRACKET . exp _RIGHT_BRACKET block _ELSE_CONDITION block
    7              | _IF_CONDITION _LEFT_BRACKET . exp _RIGHT_BRACKET block _ELSE_CONDITION if_conditions

    _VARIABLE_NAME             shift, and go to state 29
    _INTEGER_VALUE             shift, and go to state 30
    _FLOAT_VALUE               shift, and go to state 31
    _CHAR_VALUE                shift, and go to state 32
    _LEFT_BRACKET              shift, and go to state 33
    _LEFT_SELF_PLUS_UNARY_OP   shift, and go to state 34
    _LEFT_SELF_MINUS_UNARY_OP  shift, and go to state 35

    exp  go to state 37


State 24

    8 while_conditions: _WHILE_CONDITION _LEFT_BRACKET . exp _RIGHT_BRACKET block

    _VARIABLE_NAME             shift, and go to state 29
    _INTEGER_VALUE             shift, and go to state 30
    _FLOAT_VALUE               shift, and go to state 31
    _CHAR_VALUE                shift, and go to state 32
    _LEFT_BRACKET              shift, and go to state 33
    _LEFT_SELF_PLUS_UNARY_OP   shift, and go to state 34
    _LEFT_SELF_MINUS_UNARY_OP  shift, and go to state 35

    exp  go to state 38


State 25

    2 code: code . block
    3     | code . if_conditions
    4     | code . while_conditions
   10 block: _LEFT_BRACE code . _RIGHT_BRACE

    _VARIABLE_NAME      shift, and go to state 3
    _INT_DECLARATION    shift, and go to state 4
    _FLOAT_RECLARATION  shift, and go to state 5
    _CHAR_DECLARATION   shift, and go to state 6
    _IF_CONDITION       shift, and go to state 7
    _WHILE_CONDITION    shift, and go to state 8
    _LEFT_BRACE         shift, and go to state 9
    _RIGHT_BRACE        shift, and go to state 39
    _EOF                shift, and go to state 10

    if_conditions       go to state 11
    while_conditions    go to state 12
    block               go to state 13
    sentence            go to state 14
    declaration_series  go to state 15


State 26

    9 block: sentence _END_DIVIDED_CHAR .

    $default  reduce using rule 9 (block)


State 27

   46 var_declaration: _VARIABLE_NAME . assign_series exp

    _ASSIGN_UNARY_OP   shift, and go to state 16
    _PLUS_ASSIGN_OP    shift, and go to state 17
    _MINUS_ASSIGN_OP   shift, and go to state 18
    _MULTI_ASSIGN_OP   shift, and go to state 19
    _DIVIDE_ASSIGN_OP  shift, and go to state 20
    _MODULE_ASSIGN_OP  shift, and go to state 21

    assign_series  go to state 40


State 28

   12 sentence: declaration_series var_declaration .
   47 var_declaration: var_declaration . _COMMA_DIVIDED_CHAR var_declaration

    _COMMA_DIVIDED_CHAR  shift, and go to state 41

    $default  reduce using rule 12 (sentence)


State 29

   14 exp: _VARIABLE_NAME .
   18    | _VARIABLE_NAME . _SELF_PLUS_UNARY_OP
   19    | _VARIABLE_NAME . _RIGHT_SELF_MINUS_UNARY_OP

    _SELF_PLUS_UNARY_OP         shift, and go to state 42
    _RIGHT_SELF_MINUS_UNARY_OP  shift, and go to state 43

    $default  reduce using rule 14 (exp)


State 30

   15 exp: _INTEGER_VALUE .

    $default  reduce using rule 15 (exp)


State 31

   16 exp: _FLOAT_VALUE .

    $default  reduce using rule 16 (exp)


State 32

   17 exp: _CHAR_VALUE .

    $default  reduce using rule 17 (exp)


State 33

   35 exp: _LEFT_BRACKET . exp _COMMA_DIVIDED_CHAR exp _RIGHT_BRACKET
   36    | _LEFT_BRACKET . exp _RIGHT_BRACKET

    _VARIABLE_NAME             shift, and go to state 29
    _INTEGER_VALUE             shift, and go to state 30
    _FLOAT_VALUE               shift, and go to state 31
    _CHAR_VALUE                shift, and go to state 32
    _LEFT_BRACKET              shift, and go to state 33
    _LEFT_SELF_PLUS_UNARY_OP   shift, and go to state 34
    _LEFT_SELF_MINUS_UNARY_OP  shift, and go to state 35

    exp  go to state 44


State 34

   20 exp: _LEFT_SELF_PLUS_UNARY_OP . _VARIABLE_NAME

    _VARIABLE_NAME  shift, and go to state 45


State 35

   21 exp: _LEFT_SELF_MINUS_UNARY_OP . _VARIABLE_NAME

    _VARIABLE_NAME  shift, and go to state 46


State 36

   13 sentence: _VARIABLE_NAME assign_series exp .
   22 exp: exp . _PLUS_OP exp
   23    | exp . _MINUS_OP exp
   24    | exp . _MULTIPLE_OP exp
   25    | exp . _DIVIDE_OP exp
   26    | exp . _MODULE_OP exp
   27    | exp . _LARGER_OP exp
   28    | exp . _LESS_OP exp
   29    | exp . _LARGER_EQUAL_OP exp
   30    | exp . _LESS_EQUAL_OP exp
   31    | exp . _EQUAL_OP exp
   32    | exp . _NOT_EQUAL_OP exp
   33    | exp . _OR_OP exp
   34    | exp . _AND_OP exp

    _PLUS_OP          shift, and go to state 47
    _MINUS_OP         shift, and go to state 48
    _MULTIPLE_OP      shift, and go to state 49
    _DIVIDE_OP        shift, and go to state 50
    _MODULE_OP        shift, and go to state 51
    _OR_OP            shift, and go to state 52
    _AND_OP           shift, and go to state 53
    _LARGER_OP        shift, and go to state 54
    _LESS_OP          shift, and go to state 55
    _LARGER_EQUAL_OP  shift, and go to state 56
    _LESS_EQUAL_OP    shift, and go to state 57
    _NOT_EQUAL_OP     shift, and go to state 58
    _EQUAL_OP         shift, and go to state 59

    $default  reduce using rule 13 (sentence)


State 37

    5 if_conditions: _IF_CONDITION _LEFT_BRACKET exp . _RIGHT_BRACKET block
    6              | _IF_CONDITION _LEFT_BRACKET exp . _RIGHT_BRACKET block _ELSE_CONDITION block
    7              | _IF_CONDITION _LEFT_BRACKET exp . _RIGHT_BRACKET block _ELSE_CONDITION if_conditions
   22 exp: exp . _PLUS_OP exp
   23    | exp . _MINUS_OP exp
   24    | exp . _MULTIPLE_OP exp
   25    | exp . _DIVIDE_OP exp
   26    | exp . _MODULE_OP exp
   27    | exp . _LARGER_OP exp
   28    | exp . _LESS_OP exp
   29    | exp . _LARGER_EQUAL_OP exp
   30    | exp . _LESS_EQUAL_OP exp
   31    | exp . _EQUAL_OP exp
   32    | exp . _NOT_EQUAL_OP exp
   33    | exp . _OR_OP exp
   34    | exp . _AND_OP exp

    _PLUS_OP          shift, and go to state 47
    _MINUS_OP         shift, and go to state 48
    _MULTIPLE_OP      shift, and go to state 49
    _DIVIDE_OP        shift, and go to state 50
    _MODULE_OP        shift, and go to state 51
    _OR_OP            shift, and go to state 52
    _AND_OP           shift, and go to state 53
    _LARGER_OP        shift, and go to state 54
    _LESS_OP          shift, and go to state 55
    _LARGER_EQUAL_OP  shift, and go to state 56
    _LESS_EQUAL_OP    shift, and go to state 57
    _NOT_EQUAL_OP     shift, and go to state 58
    _EQUAL_OP         shift, and go to state 59
    _RIGHT_BRACKET    shift, and go to state 60


State 38

    8 while_conditions: _WHILE_CONDITION _LEFT_BRACKET exp . _RIGHT_BRACKET block
   22 exp: exp . _PLUS_OP exp
   23    | exp . _MINUS_OP exp
   24    | exp . _MULTIPLE_OP exp
   25    | exp . _DIVIDE_OP exp
   26    | exp . _MODULE_OP exp
   27    | exp . _LARGER_OP exp
   28    | exp . _LESS_OP exp
   29    | exp . _LARGER_EQUAL_OP exp
   30    | exp . _LESS_EQUAL_OP exp
   31    | exp . _EQUAL_OP exp
   32    | exp . _NOT_EQUAL_OP exp
   33    | exp . _OR_OP exp
   34    | exp . _AND_OP exp

    _PLUS_OP          shift, and go to state 47
    _MINUS_OP         shift, and go to state 48
    _MULTIPLE_OP      shift, and go to state 49
    _DIVIDE_OP        shift, and go to state 50
    _MODULE_OP        shift, and go to state 51
    _OR_OP            shift, and go to state 52
    _AND_OP           shift, and go to state 53
    _LARGER_OP        shift, and go to state 54
    _LESS_OP          shift, and go to state 55
    _LARGER_EQUAL_OP  shift, and go to state 56
    _LESS_EQUAL_OP    shift, and go to state 57
    _NOT_EQUAL_OP     shift, and go to state 58
    _EQUAL_OP         shift, and go to state 59
    _RIGHT_BRACKET    shift, and go to state 61


State 39

   10 block: _LEFT_BRACE code _RIGHT_BRACE .

    $default  reduce using rule 10 (block)


State 40

   46 var_declaration: _VARIABLE_NAME assign_series . exp

    _VARIABLE_NAME             shift, and go to state 29
    _INTEGER_VALUE             shift, and go to state 30
    _FLOAT_VALUE               shift, and go to state 31
    _CHAR_VALUE                shift, and go to state 32
    _LEFT_BRACKET              shift, and go to state 33
    _LEFT_SELF_PLUS_UNARY_OP   shift, and go to state 34
    _LEFT_SELF_MINUS_UNARY_OP  shift, and go to state 35

    exp  go to state 62


State 41

   47 var_declaration: var_declaration _COMMA_DIVIDED_CHAR . var_declaration

    _VARIABLE_NAME  shift, and go to state 27

    var_declaration  go to state 63


State 42

   18 exp: _VARIABLE_NAME _SELF_PLUS_UNARY_OP .

    $default  reduce using rule 18 (exp)


State 43

   19 exp: _VARIABLE_NAME _RIGHT_SELF_MINUS_UNARY_OP .

    $default  reduce using rule 19 (exp)


State 44

   22 exp: exp . _PLUS_OP exp
   23    | exp . _MINUS_OP exp
   24    | exp . _MULTIPLE_OP exp
   25    | exp . _DIVIDE_OP exp
   26    | exp . _MODULE_OP exp
   27    | exp . _LARGER_OP exp
   28    | exp . _LESS_OP exp
   29    | exp . _LARGER_EQUAL_OP exp
   30    | exp . _LESS_EQUAL_OP exp
   31    | exp . _EQUAL_OP exp
   32    | exp . _NOT_EQUAL_OP exp
   33    | exp . _OR_OP exp
   34    | exp . _AND_OP exp
   35    | _LEFT_BRACKET exp . _COMMA_DIVIDED_CHAR exp _RIGHT_BRACKET
   36    | _LEFT_BRACKET exp . _RIGHT_BRACKET

    _PLUS_OP             shift, and go to state 47
    _MINUS_OP            shift, and go to state 48
    _MULTIPLE_OP         shift, and go to state 49
    _DIVIDE_OP           shift, and go to state 50
    _MODULE_OP           shift, and go to state 51
    _OR_OP               shift, and go to state 52
    _AND_OP              shift, and go to state 53
    _LARGER_OP           shift, and go to state 54
    _LESS_OP             shift, and go to state 55
    _LARGER_EQUAL_OP     shift, and go to state 56
    _LESS_EQUAL_OP       shift, and go to state 57
    _NOT_EQUAL_OP        shift, and go to state 58
    _EQUAL_OP            shift, and go to state 59
    _RIGHT_BRACKET       shift, and go to state 64
    _COMMA_DIVIDED_CHAR  shift, and go to state 65


State 45

   20 exp: _LEFT_SELF_PLUS_UNARY_OP _VARIABLE_NAME .

    $default  reduce using rule 20 (exp)


State 46

   21 exp: _LEFT_SELF_MINUS_UNARY_OP _VARIABLE_NAME .

    $default  reduce using rule 21 (exp)


State 47

   22 exp: exp _PLUS_OP . exp

    _VARIABLE_NAME             shift, and go to state 29
    _INTEGER_VALUE             shift, and go to state 30
    _FLOAT_VALUE               shift, and go to state 31
    _CHAR_VALUE                shift, and go to state 32
    _LEFT_BRACKET              shift, and go to state 33
    _LEFT_SELF_PLUS_UNARY_OP   shift, and go to state 34
    _LEFT_SELF_MINUS_UNARY_OP  shift, and go to state 35

    exp  go to state 66


State 48

   23 exp: exp _MINUS_OP . exp

    _VARIABLE_NAME             shift, and go to state 29
    _INTEGER_VALUE             shift, and go to state 30
    _FLOAT_VALUE               shift, and go to state 31
    _CHAR_VALUE                shift, and go to state 32
    _LEFT_BRACKET              shift, and go to state 33
    _LEFT_SELF_PLUS_UNARY_OP   shift, and go to state 34
    _LEFT_SELF_MINUS_UNARY_OP  shift, and go to state 35

    exp  go to state 67


State 49

   24 exp: exp _MULTIPLE_OP . exp

    _VARIABLE_NAME             shift, and go to state 29
    _INTEGER_VALUE             shift, and go to state 30
    _FLOAT_VALUE               shift, and go to state 31
    _CHAR_VALUE                shift, and go to state 32
    _LEFT_BRACKET              shift, and go to state 33
    _LEFT_SELF_PLUS_UNARY_OP   shift, and go to state 34
    _LEFT_SELF_MINUS_UNARY_OP  shift, and go to state 35

    exp  go to state 68


State 50

   25 exp: exp _DIVIDE_OP . exp

    _VARIABLE_NAME             shift, and go to state 29
    _INTEGER_VALUE             shift, and go to state 30
    _FLOAT_VALUE               shift, and go to state 31
    _CHAR_VALUE                shift, and go to state 32
    _LEFT_BRACKET              shift, and go to state 33
    _LEFT_SELF_PLUS_UNARY_OP   shift, and go to state 34
    _LEFT_SELF_MINUS_UNARY_OP  shift, and go to state 35

    exp  go to state 69


State 51

   26 exp: exp _MODULE_OP . exp

    _VARIABLE_NAME             shift, and go to state 29
    _INTEGER_VALUE             shift, and go to state 30
    _FLOAT_VALUE               shift, and go to state 31
    _CHAR_VALUE                shift, and go to state 32
    _LEFT_BRACKET              shift, and go to state 33
    _LEFT_SELF_PLUS_UNARY_OP   shift, and go to state 34
    _LEFT_SELF_MINUS_UNARY_OP  shift, and go to state 35

    exp  go to state 70


State 52

   33 exp: exp _OR_OP . exp

    _VARIABLE_NAME             shift, and go to state 29
    _INTEGER_VALUE             shift, and go to state 30
    _FLOAT_VALUE               shift, and go to state 31
    _CHAR_VALUE                shift, and go to state 32
    _LEFT_BRACKET              shift, and go to state 33
    _LEFT_SELF_PLUS_UNARY_OP   shift, and go to state 34
    _LEFT_SELF_MINUS_UNARY_OP  shift, and go to state 35

    exp  go to state 71


State 53

   34 exp: exp _AND_OP . exp

    _VARIABLE_NAME             shift, and go to state 29
    _INTEGER_VALUE             shift, and go to state 30
    _FLOAT_VALUE               shift, and go to state 31
    _CHAR_VALUE                shift, and go to state 32
    _LEFT_BRACKET              shift, and go to state 33
    _LEFT_SELF_PLUS_UNARY_OP   shift, and go to state 34
    _LEFT_SELF_MINUS_UNARY_OP  shift, and go to state 35

    exp  go to state 72


State 54

   27 exp: exp _LARGER_OP . exp

    _VARIABLE_NAME             shift, and go to state 29
    _INTEGER_VALUE             shift, and go to state 30
    _FLOAT_VALUE               shift, and go to state 31
    _CHAR_VALUE                shift, and go to state 32
    _LEFT_BRACKET              shift, and go to state 33
    _LEFT_SELF_PLUS_UNARY_OP   shift, and go to state 34
    _LEFT_SELF_MINUS_UNARY_OP  shift, and go to state 35

    exp  go to state 73


State 55

   28 exp: exp _LESS_OP . exp

    _VARIABLE_NAME             shift, and go to state 29
    _INTEGER_VALUE             shift, and go to state 30
    _FLOAT_VALUE               shift, and go to state 31
    _CHAR_VALUE                shift, and go to state 32
    _LEFT_BRACKET              shift, and go to state 33
    _LEFT_SELF_PLUS_UNARY_OP   shift, and go to state 34
    _LEFT_SELF_MINUS_UNARY_OP  shift, and go to state 35

    exp  go to state 74


State 56

   29 exp: exp _LARGER_EQUAL_OP . exp

    _VARIABLE_NAME             shift, and go to state 29
    _INTEGER_VALUE             shift, and go to state 30
    _FLOAT_VALUE               shift, and go to state 31
    _CHAR_VALUE                shift, and go to state 32
    _LEFT_BRACKET              shift, and go to state 33
    _LEFT_SELF_PLUS_UNARY_OP   shift, and go to state 34
    _LEFT_SELF_MINUS_UNARY_OP  shift, and go to state 35

    exp  go to state 75


State 57

   30 exp: exp _LESS_EQUAL_OP . exp

    _VARIABLE_NAME             shift, and go to state 29
    _INTEGER_VALUE             shift, and go to state 30
    _FLOAT_VALUE               shift, and go to state 31
    _CHAR_VALUE                shift, and go to state 32
    _LEFT_BRACKET              shift, and go to state 33
    _LEFT_SELF_PLUS_UNARY_OP   shift, and go to state 34
    _LEFT_SELF_MINUS_UNARY_OP  shift, and go to state 35

    exp  go to state 76


State 58

   32 exp: exp _NOT_EQUAL_OP . exp

    _VARIABLE_NAME             shift, and go to state 29
    _INTEGER_VALUE             shift, and go to state 30
    _FLOAT_VALUE               shift, and go to state 31
    _CHAR_VALUE                shift, and go to state 32
    _LEFT_BRACKET              shift, and go to state 33
    _LEFT_SELF_PLUS_UNARY_OP   shift, and go to state 34
    _LEFT_SELF_MINUS_UNARY_OP  shift, and go to state 35

    exp  go to state 77


State 59

   31 exp: exp _EQUAL_OP . exp

    _VARIABLE_NAME             shift, and go to state 29
    _INTEGER_VALUE             shift, and go to state 30
    _FLOAT_VALUE               shift, and go to state 31
    _CHAR_VALUE                shift, and go to state 32
    _LEFT_BRACKET              shift, and go to state 33
    _LEFT_SELF_PLUS_UNARY_OP   shift, and go to state 34
    _LEFT_SELF_MINUS_UNARY_OP  shift, and go to state 35

    exp  go to state 78


State 60

    5 if_conditions: _IF_CONDITION _LEFT_BRACKET exp _RIGHT_BRACKET . block
    6              | _IF_CONDITION _LEFT_BRACKET exp _RIGHT_BRACKET . block _ELSE_CONDITION block
    7              | _IF_CONDITION _LEFT_BRACKET exp _RIGHT_BRACKET . block _ELSE_CONDITION if_conditions

    _VARIABLE_NAME      shift, and go to state 3
    _INT_DECLARATION    shift, and go to state 4
    _FLOAT_RECLARATION  shift, and go to state 5
    _CHAR_DECLARATION   shift, and go to state 6
    _LEFT_BRACE         shift, and go to state 9
    _EOF                shift, and go to state 10

    block               go to state 79
    sentence            go to state 14
    declaration_series  go to state 15


State 61

    8 while_conditions: _WHILE_CONDITION _LEFT_BRACKET exp _RIGHT_BRACKET . block

    _VARIABLE_NAME      shift, and go to state 3
    _INT_DECLARATION    shift, and go to state 4
    _FLOAT_RECLARATION  shift, and go to state 5
    _CHAR_DECLARATION   shift, and go to state 6
    _LEFT_BRACE         shift, and go to state 9
    _EOF                shift, and go to state 10

    block               go to state 80
    sentence            go to state 14
    declaration_series  go to state 15


State 62

   22 exp: exp . _PLUS_OP exp
   23    | exp . _MINUS_OP exp
   24    | exp . _MULTIPLE_OP exp
   25    | exp . _DIVIDE_OP exp
   26    | exp . _MODULE_OP exp
   27    | exp . _LARGER_OP exp
   28    | exp . _LESS_OP exp
   29    | exp . _LARGER_EQUAL_OP exp
   30    | exp . _LESS_EQUAL_OP exp
   31    | exp . _EQUAL_OP exp
   32    | exp . _NOT_EQUAL_OP exp
   33    | exp . _OR_OP exp
   34    | exp . _AND_OP exp
   46 var_declaration: _VARIABLE_NAME assign_series exp .

    _PLUS_OP          shift, and go to state 47
    _MINUS_OP         shift, and go to state 48
    _MULTIPLE_OP      shift, and go to state 49
    _DIVIDE_OP        shift, and go to state 50
    _MODULE_OP        shift, and go to state 51
    _OR_OP            shift, and go to state 52
    _AND_OP           shift, and go to state 53
    _LARGER_OP        shift, and go to state 54
    _LESS_OP          shift, and go to state 55
    _LARGER_EQUAL_OP  shift, and go to state 56
    _LESS_EQUAL_OP    shift, and go to state 57
    _NOT_EQUAL_OP     shift, and go to state 58
    _EQUAL_OP         shift, and go to state 59

    $default  reduce using rule 46 (var_declaration)


State 63

   47 var_declaration: var_declaration . _COMMA_DIVIDED_CHAR var_declaration
   47                | var_declaration _COMMA_DIVIDED_CHAR var_declaration .

    $default  reduce using rule 47 (var_declaration)


State 64

   36 exp: _LEFT_BRACKET exp _RIGHT_BRACKET .

    $default  reduce using rule 36 (exp)


State 65

   35 exp: _LEFT_BRACKET exp _COMMA_DIVIDED_CHAR . exp _RIGHT_BRACKET

    _VARIABLE_NAME             shift, and go to state 29
    _INTEGER_VALUE             shift, and go to state 30
    _FLOAT_VALUE               shift, and go to state 31
    _CHAR_VALUE                shift, and go to state 32
    _LEFT_BRACKET              shift, and go to state 33
    _LEFT_SELF_PLUS_UNARY_OP   shift, and go to state 34
    _LEFT_SELF_MINUS_UNARY_OP  shift, and go to state 35

    exp  go to state 81


State 66

   22 exp: exp . _PLUS_OP exp
   22    | exp _PLUS_OP exp .
   23    | exp . _MINUS_OP exp
   24    | exp . _MULTIPLE_OP exp
   25    | exp . _DIVIDE_OP exp
   26    | exp . _MODULE_OP exp
   27    | exp . _LARGER_OP exp
   28    | exp . _LESS_OP exp
   29    | exp . _LARGER_EQUAL_OP exp
   30    | exp . _LESS_EQUAL_OP exp
   31    | exp . _EQUAL_OP exp
   32    | exp . _NOT_EQUAL_OP exp
   33    | exp . _OR_OP exp
   34    | exp . _AND_OP exp

    _MULTIPLE_OP  shift, and go to state 49
    _DIVIDE_OP    shift, and go to state 50
    _MODULE_OP    shift, and go to state 51

    $default  reduce using rule 22 (exp)


State 67

   22 exp: exp . _PLUS_OP exp
   23    | exp . _MINUS_OP exp
   23    | exp _MINUS_OP exp .
   24    | exp . _MULTIPLE_OP exp
   25    | exp . _DIVIDE_OP exp
   26    | exp . _MODULE_OP exp
   27    | exp . _LARGER_OP exp
   28    | exp . _LESS_OP exp
   29    | exp . _LARGER_EQUAL_OP exp
   30    | exp . _LESS_EQUAL_OP exp
   31    | exp . _EQUAL_OP exp
   32    | exp . _NOT_EQUAL_OP exp
   33    | exp . _OR_OP exp
   34    | exp . _AND_OP exp

    _MULTIPLE_OP  shift, and go to state 49
    _DIVIDE_OP    shift, and go to state 50
    _MODULE_OP    shift, and go to state 51

    $default  reduce using rule 23 (exp)


State 68

   22 exp: exp . _PLUS_OP exp
   23    | exp . _MINUS_OP exp
   24    | exp . _MULTIPLE_OP exp
   24    | exp _MULTIPLE_OP exp .
   25    | exp . _DIVIDE_OP exp
   26    | exp . _MODULE_OP exp
   27    | exp . _LARGER_OP exp
   28    | exp . _LESS_OP exp
   29    | exp . _LARGER_EQUAL_OP exp
   30    | exp . _LESS_EQUAL_OP exp
   31    | exp . _EQUAL_OP exp
   32    | exp . _NOT_EQUAL_OP exp
   33    | exp . _OR_OP exp
   34    | exp . _AND_OP exp

    $default  reduce using rule 24 (exp)


State 69

   22 exp: exp . _PLUS_OP exp
   23    | exp . _MINUS_OP exp
   24    | exp . _MULTIPLE_OP exp
   25    | exp . _DIVIDE_OP exp
   25    | exp _DIVIDE_OP exp .
   26    | exp . _MODULE_OP exp
   27    | exp . _LARGER_OP exp
   28    | exp . _LESS_OP exp
   29    | exp . _LARGER_EQUAL_OP exp
   30    | exp . _LESS_EQUAL_OP exp
   31    | exp . _EQUAL_OP exp
   32    | exp . _NOT_EQUAL_OP exp
   33    | exp . _OR_OP exp
   34    | exp . _AND_OP exp

    $default  reduce using rule 25 (exp)


State 70

   22 exp: exp . _PLUS_OP exp
   23    | exp . _MINUS_OP exp
   24    | exp . _MULTIPLE_OP exp
   25    | exp . _DIVIDE_OP exp
   26    | exp . _MODULE_OP exp
   26    | exp _MODULE_OP exp .
   27    | exp . _LARGER_OP exp
   28    | exp . _LESS_OP exp
   29    | exp . _LARGER_EQUAL_OP exp
   30    | exp . _LESS_EQUAL_OP exp
   31    | exp . _EQUAL_OP exp
   32    | exp . _NOT_EQUAL_OP exp
   33    | exp . _OR_OP exp
   34    | exp . _AND_OP exp

    $default  reduce using rule 26 (exp)


State 71

   22 exp: exp . _PLUS_OP exp
   23    | exp . _MINUS_OP exp
   24    | exp . _MULTIPLE_OP exp
   25    | exp . _DIVIDE_OP exp
   26    | exp . _MODULE_OP exp
   27    | exp . _LARGER_OP exp
   28    | exp . _LESS_OP exp
   29    | exp . _LARGER_EQUAL_OP exp
   30    | exp . _LESS_EQUAL_OP exp
   31    | exp . _EQUAL_OP exp
   32    | exp . _NOT_EQUAL_OP exp
   33    | exp . _OR_OP exp
   33    | exp _OR_OP exp .
   34    | exp . _AND_OP exp

    _PLUS_OP          shift, and go to state 47
    _MINUS_OP         shift, and go to state 48
    _MULTIPLE_OP      shift, and go to state 49
    _DIVIDE_OP        shift, and go to state 50
    _MODULE_OP        shift, and go to state 51
    _LARGER_OP        shift, and go to state 54
    _LESS_OP          shift, and go to state 55
    _LARGER_EQUAL_OP  shift, and go to state 56
    _LESS_EQUAL_OP    shift, and go to state 57
    _NOT_EQUAL_OP     shift, and go to state 58
    _EQUAL_OP         shift, and go to state 59

    $default  reduce using rule 33 (exp)


State 72

   22 exp: exp . _PLUS_OP exp
   23    | exp . _MINUS_OP exp
   24    | exp . _MULTIPLE_OP exp
   25    | exp . _DIVIDE_OP exp
   26    | exp . _MODULE_OP exp
   27    | exp . _LARGER_OP exp
   28    | exp . _LESS_OP exp
   29    | exp . _LARGER_EQUAL_OP exp
   30    | exp . _LESS_EQUAL_OP exp
   31    | exp . _EQUAL_OP exp
   32    | exp . _NOT_EQUAL_OP exp
   33    | exp . _OR_OP exp
   34    | exp . _AND_OP exp
   34    | exp _AND_OP exp .

    _PLUS_OP          shift, and go to state 47
    _MINUS_OP         shift, and go to state 48
    _MULTIPLE_OP      shift, and go to state 49
    _DIVIDE_OP        shift, and go to state 50
    _MODULE_OP        shift, and go to state 51
    _LARGER_OP        shift, and go to state 54
    _LESS_OP          shift, and go to state 55
    _LARGER_EQUAL_OP  shift, and go to state 56
    _LESS_EQUAL_OP    shift, and go to state 57
    _NOT_EQUAL_OP     shift, and go to state 58
    _EQUAL_OP         shift, and go to state 59

    $default  reduce using rule 34 (exp)


State 73

   22 exp: exp . _PLUS_OP exp
   23    | exp . _MINUS_OP exp
   24    | exp . _MULTIPLE_OP exp
   25    | exp . _DIVIDE_OP exp
   26    | exp . _MODULE_OP exp
   27    | exp . _LARGER_OP exp
   27    | exp _LARGER_OP exp .
   28    | exp . _LESS_OP exp
   29    | exp . _LARGER_EQUAL_OP exp
   30    | exp . _LESS_EQUAL_OP exp
   31    | exp . _EQUAL_OP exp
   32    | exp . _NOT_EQUAL_OP exp
   33    | exp . _OR_OP exp
   34    | exp . _AND_OP exp

    _PLUS_OP      shift, and go to state 47
    _MINUS_OP     shift, and go to state 48
    _MULTIPLE_OP  shift, and go to state 49
    _DIVIDE_OP    shift, and go to state 50
    _MODULE_OP    shift, and go to state 51

    $default  reduce using rule 27 (exp)


State 74

   22 exp: exp . _PLUS_OP exp
   23    | exp . _MINUS_OP exp
   24    | exp . _MULTIPLE_OP exp
   25    | exp . _DIVIDE_OP exp
   26    | exp . _MODULE_OP exp
   27    | exp . _LARGER_OP exp
   28    | exp . _LESS_OP exp
   28    | exp _LESS_OP exp .
   29    | exp . _LARGER_EQUAL_OP exp
   30    | exp . _LESS_EQUAL_OP exp
   31    | exp . _EQUAL_OP exp
   32    | exp . _NOT_EQUAL_OP exp
   33    | exp . _OR_OP exp
   34    | exp . _AND_OP exp

    _PLUS_OP      shift, and go to state 47
    _MINUS_OP     shift, and go to state 48
    _MULTIPLE_OP  shift, and go to state 49
    _DIVIDE_OP    shift, and go to state 50
    _MODULE_OP    shift, and go to state 51

    $default  reduce using rule 28 (exp)


State 75

   22 exp: exp . _PLUS_OP exp
   23    | exp . _MINUS_OP exp
   24    | exp . _MULTIPLE_OP exp
   25    | exp . _DIVIDE_OP exp
   26    | exp . _MODULE_OP exp
   27    | exp . _LARGER_OP exp
   28    | exp . _LESS_OP exp
   29    | exp . _LARGER_EQUAL_OP exp
   29    | exp _LARGER_EQUAL_OP exp .
   30    | exp . _LESS_EQUAL_OP exp
   31    | exp . _EQUAL_OP exp
   32    | exp . _NOT_EQUAL_OP exp
   33    | exp . _OR_OP exp
   34    | exp . _AND_OP exp

    _PLUS_OP      shift, and go to state 47
    _MINUS_OP     shift, and go to state 48
    _MULTIPLE_OP  shift, and go to state 49
    _DIVIDE_OP    shift, and go to state 50
    _MODULE_OP    shift, and go to state 51

    $default  reduce using rule 29 (exp)


State 76

   22 exp: exp . _PLUS_OP exp
   23    | exp . _MINUS_OP exp
   24    | exp . _MULTIPLE_OP exp
   25    | exp . _DIVIDE_OP exp
   26    | exp . _MODULE_OP exp
   27    | exp . _LARGER_OP exp
   28    | exp . _LESS_OP exp
   29    | exp . _LARGER_EQUAL_OP exp
   30    | exp . _LESS_EQUAL_OP exp
   30    | exp _LESS_EQUAL_OP exp .
   31    | exp . _EQUAL_OP exp
   32    | exp . _NOT_EQUAL_OP exp
   33    | exp . _OR_OP exp
   34    | exp . _AND_OP exp

    _PLUS_OP      shift, and go to state 47
    _MINUS_OP     shift, and go to state 48
    _MULTIPLE_OP  shift, and go to state 49
    _DIVIDE_OP    shift, and go to state 50
    _MODULE_OP    shift, and go to state 51

    $default  reduce using rule 30 (exp)


State 77

   22 exp: exp . _PLUS_OP exp
   23    | exp . _MINUS_OP exp
   24    | exp . _MULTIPLE_OP exp
   25    | exp . _DIVIDE_OP exp
   26    | exp . _MODULE_OP exp
   27    | exp . _LARGER_OP exp
   28    | exp . _LESS_OP exp
   29    | exp . _LARGER_EQUAL_OP exp
   30    | exp . _LESS_EQUAL_OP exp
   31    | exp . _EQUAL_OP exp
   32    | exp . _NOT_EQUAL_OP exp
   32    | exp _NOT_EQUAL_OP exp .
   33    | exp . _OR_OP exp
   34    | exp . _AND_OP exp

    _PLUS_OP          shift, and go to state 47
    _MINUS_OP         shift, and go to state 48
    _MULTIPLE_OP      shift, and go to state 49
    _DIVIDE_OP        shift, and go to state 50
    _MODULE_OP        shift, and go to state 51
    _LARGER_OP        shift, and go to state 54
    _LESS_OP          shift, and go to state 55
    _LARGER_EQUAL_OP  shift, and go to state 56
    _LESS_EQUAL_OP    shift, and go to state 57

    $default  reduce using rule 32 (exp)


State 78

   22 exp: exp . _PLUS_OP exp
   23    | exp . _MINUS_OP exp
   24    | exp . _MULTIPLE_OP exp
   25    | exp . _DIVIDE_OP exp
   26    | exp . _MODULE_OP exp
   27    | exp . _LARGER_OP exp
   28    | exp . _LESS_OP exp
   29    | exp . _LARGER_EQUAL_OP exp
   30    | exp . _LESS_EQUAL_OP exp
   31    | exp . _EQUAL_OP exp
   31    | exp _EQUAL_OP exp .
   32    | exp . _NOT_EQUAL_OP exp
   33    | exp . _OR_OP exp
   34    | exp . _AND_OP exp

    _PLUS_OP          shift, and go to state 47
    _MINUS_OP         shift, and go to state 48
    _MULTIPLE_OP      shift, and go to state 49
    _DIVIDE_OP        shift, and go to state 50
    _MODULE_OP        shift, and go to state 51
    _LARGER_OP        shift, and go to state 54
    _LESS_OP          shift, and go to state 55
    _LARGER_EQUAL_OP  shift, and go to state 56
    _LESS_EQUAL_OP    shift, and go to state 57

    $default  reduce using rule 31 (exp)


State 79

    5 if_conditions: _IF_CONDITION _LEFT_BRACKET exp _RIGHT_BRACKET block .
    6              | _IF_CONDITION _LEFT_BRACKET exp _RIGHT_BRACKET block . _ELSE_CONDITION block
    7              | _IF_CONDITION _LEFT_BRACKET exp _RIGHT_BRACKET block . _ELSE_CONDITION if_conditions

    _ELSE_CONDITION  shift, and go to state 82

    $default  reduce using rule 5 (if_conditions)


State 80

    8 while_conditions: _WHILE_CONDITION _LEFT_BRACKET exp _RIGHT_BRACKET block .

    $default  reduce using rule 8 (while_conditions)


State 81

   22 exp: exp . _PLUS_OP exp
   23    | exp . _MINUS_OP exp
   24    | exp . _MULTIPLE_OP exp
   25    | exp . _DIVIDE_OP exp
   26    | exp . _MODULE_OP exp
   27    | exp . _LARGER_OP exp
   28    | exp . _LESS_OP exp
   29    | exp . _LARGER_EQUAL_OP exp
   30    | exp . _LESS_EQUAL_OP exp
   31    | exp . _EQUAL_OP exp
   32    | exp . _NOT_EQUAL_OP exp
   33    | exp . _OR_OP exp
   34    | exp . _AND_OP exp
   35    | _LEFT_BRACKET exp _COMMA_DIVIDED_CHAR exp . _RIGHT_BRACKET

    _PLUS_OP          shift, and go to state 47
    _MINUS_OP         shift, and go to state 48
    _MULTIPLE_OP      shift, and go to state 49
    _DIVIDE_OP        shift, and go to state 50
    _MODULE_OP        shift, and go to state 51
    _OR_OP            shift, and go to state 52
    _AND_OP           shift, and go to state 53
    _LARGER_OP        shift, and go to state 54
    _LESS_OP          shift, and go to state 55
    _LARGER_EQUAL_OP  shift, and go to state 56
    _LESS_EQUAL_OP    shift, and go to state 57
    _NOT_EQUAL_OP     shift, and go to state 58
    _EQUAL_OP         shift, and go to state 59
    _RIGHT_BRACKET    shift, and go to state 83


State 82

    6 if_conditions: _IF_CONDITION _LEFT_BRACKET exp _RIGHT_BRACKET block _ELSE_CONDITION . block
    7              | _IF_CONDITION _LEFT_BRACKET exp _RIGHT_BRACKET block _ELSE_CONDITION . if_conditions

    _VARIABLE_NAME      shift, and go to state 3
    _INT_DECLARATION    shift, and go to state 4
    _FLOAT_RECLARATION  shift, and go to state 5
    _CHAR_DECLARATION   shift, and go to state 6
    _IF_CONDITION       shift, and go to state 7
    _LEFT_BRACE         shift, and go to state 9
    _EOF                shift, and go to state 10

    if_conditions       go to state 84
    block               go to state 85
    sentence            go to state 14
    declaration_series  go to state 15


State 83

   35 exp: _LEFT_BRACKET exp _COMMA_DIVIDED_CHAR exp _RIGHT_BRACKET .

    $default  reduce using rule 35 (exp)


State 84

    7 if_conditions: _IF_CONDITION _LEFT_BRACKET exp _RIGHT_BRACKET block _ELSE_CONDITION if_conditions .

    $default  reduce using rule 7 (if_conditions)


State 85

    6 if_conditions: _IF_CONDITION _LEFT_BRACKET exp _RIGHT_BRACKET block _ELSE_CONDITION block .

    $default  reduce using rule 6 (if_conditions)
